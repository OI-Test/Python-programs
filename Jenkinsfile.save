pipeline {
    agent any
   environment{
	    	//GIT_EMAIL=$(sh "git --no-pager show -s --format=\'%ae\'",returnStdout: true).trim()
	   	mail = sh(returnStdout: true, script: 'git --no-pager show -s --format=\'%ae\'').trim()
	   	//emails = sh(returnStdout: true, script: 'grep -E -o "\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+.\[A-Za-z]{2,6}\b" Solutions/generator.py')
	   	//sh 'ls Solutions > files.txt'
	   	line=sh(returnStdout: true, script: 'ls Solutions > files.txt | head -n 1 files.txt')
	    	//sh 'echo ${mails}'
	       }	
    stages {
	    stage('Installing-Dependencies'){
	    	steps{
			//sh 'sed -i "1d" files.txt > files.txt'
			//sh'cat files.txt'
			//sh 'while read line;do echo -e "$line"; done < files.txt'
			sh 'sudo apt install -y python3-pip'
			sh 'pip3 install -r requirements.txt'
			// GIT_EMAIL = $(sh 'git --no-pager show -s --format='%ae' $GIT_COMMIT')
			//sh 'git --no-pager show -s --format=\'%an\''
 			//sh 'echo ${mail}'
			//sh 'echo ${files}'
			//sh 'cat files.txt'
			//sh 'echo ${line}'
		}
	    }
			    
	    stage('Tests') {
	    	steps {
			//echo "Code Coverage"
			//sh 'python3 -m coverage run Solutions/generator.py xml -o ./reports/coverage.xml'
			sh '''
			sed -i "/init/d" files.txt
			sed -i "/pycache/d" files.txt
			sed -i "/generator/d" files.txt
			cat files.txt
			while read lines
			do  
			echo ${lines}
			cp Solutions/${lines} Solutions/generator.py 
			python3 -m coverage run Solutions/${lines}
			python3 -m coverage xml -o ./reports/${lines}_coverage.xml
			python3 -m pytest -v Tests/test.py --junit-xml reports/${lines}_testresults.xml
			pylint Solutions/generator.py > ${lines}_pylint.report || true
			rm Solutions/generator.py
			sed -i "1d" files.txt 
			done < files.txt
			echo DONE_DONE
			'''
			//
			//rm Solutions/${lines}
			
			//sh 'python3 -m pytest --cov=. -v tests/*'
			//sh 'python3 -m pytest --cov xml -o ./reports/coverage.xml'
		    }
		
		post{ 
			//Email try
			always {
				junit allowEmptyResults: true, testResults: 'reports/*_testresults.xml'
				recordIssues(
                    			tool: pyLint(pattern: 'reports/*pylint.report'),
                    			unstableTotalAll: 20,
                    			failedTotalAll: 30
				)
				//junit allowEmptyResults: true, testResults: reports/${lines}_testresults.xml
			    emailext (
				subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
				body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
					 <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
				//to: sh 'echo ${mails}',	
				    recipientProviders: [
							    //[$class: 'CulpritsRecipientProvider'],
							    [$class: 'DevelopersRecipientProvider'],
							    [$class: 'RequesterRecipientProvider']
							]
			    )
        		}
		}
	}
    
    }
}
