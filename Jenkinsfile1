pipeline {
    agent any
    stages {
	    stage('Installing-Dependencies'){
	    	steps{
			sh 'pip3 install -r requirements.txt'
		}
	    }
			    
	    stage('Coverage-Tests') {
	    	steps {
			echo "Code Coverage"
			sh 'python3 -m coverage run buzz/*'
			//sh 'python3 -m coverage xml -o ./reports/coverage.xml'
			//sh 'python3 -m pytest --cov=. -v tests/*'
			//sh 'python3 -m pytest --cov xml -o ./reports/coverage.xml'
		    }
		 post {
			always {
			    // Archive unit tests for the future
			    // Trigger check
			    step([$class: 'CoberturaPublisher',
					   autoUpdateHealth: false,
					   autoUpdateStability: false,
					   coberturaReportFile: 'reports/coverage.xml',
					   failNoReports: false,
					   failUnhealthy: false,
					   failUnstable: false,
					   maxNumberOfBuilds: 10,
					   onlyStable: false,
					   sourceEncoding: 'ASCII',
					   zoomCoverageChart: false])
			}
		    }
		}
        stage('Unit-Tests') {
        	steps {
                	sh 'python3 -m pytest -v tests/* --junit-xml reports/results.xml'
            }
		post {
			always {
			    // Archive unit tests for the future
			    // Trigger check
			    junit allowEmptyResults: true, testResults: 'reports/results.xml'
			}
		}
	}
	
	    /*   			***  FOR INTEGRATION TESTS  ***
	
	stage('integration tests') {
            steps {
                sh  ''' 
                        python3 -m behave -f=formatters.cucumber_json:PrettyCucumberJSONFormatter -o ./reports/integration.json
                    '''   
	    }
	}
	
	*/
	stage('Style-Checks') {
        	steps {
                	echo "PEP8 style check"
                	sh  'echo pylint --disable=C buzz'
            } 
		post{   //Email try
			success {
			    emailext (
				subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
				body: """<p>FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
					 <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
					recipientProviders: [
							    [$class: 'CulpritsRecipientProvider'],
							    [$class: 'DevelopersRecipientProvider'],
							    [$class: 'RequesterRecipientProvider']
							]
			    )
        		}
		}
	}
	    
	    /*
	    			***   FOR INTEGRATION TEST    ***
	    
	post {
      	    always { 
		    cucumber (fileIncludePattern: '**\/integration*.json',
                              jsonReportDirectory: './reports/',
                              parallelTesting: true,
                              sortingMethod: 'ALPHABETICAL') 
                } */
    
    }
}
